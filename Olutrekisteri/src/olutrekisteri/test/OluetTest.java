package olutrekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import olutrekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.19 17:29:55 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class OluetTest {



  // Generated by ComTest BEGIN
  /** testLisaa36 */
  @Test
  public void testLisaa36() {    // Oluet: 36
    Oluet oluet = new Oluet(); 
    Olut olut1 = new Olut(), olut2 = new Olut(); 
    assertEquals("From: Oluet line: 39", 0, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 40", 1, oluet.getLkm()); 
    oluet.lisaa(olut2); assertEquals("From: Oluet line: 41", 2, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 42", 3, oluet.getLkm()); 
    assertEquals("From: Oluet line: 43", olut1, oluet.anna(0)); 
    assertEquals("From: Oluet line: 44", olut2, oluet.anna(1)); 
    assertEquals("From: Oluet line: 45", olut1, oluet.anna(2)); 
    assertEquals("From: Oluet line: 46", false, oluet.anna(1) == olut1); 
    assertEquals("From: Oluet line: 47", true, oluet.anna(1) == olut2); 
    try {
    assertEquals("From: Oluet line: 48", olut1, oluet.anna(3)); 
    fail("Oluet: 48 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 49", 4, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 50", 5, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 51", 6, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 52", 7, oluet.getLkm()); 
    oluet.lisaa(olut1); assertEquals("From: Oluet line: 53", 8, oluet.getLkm()); 
    assertEquals("From: Oluet line: 54", olut1, oluet.anna(oluet.getLkm()-1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa75 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa75() throws CloneNotSupportedException {    // Oluet: 75
    Oluet oluet = new Oluet(); 
    Olut o1 = new Olut(), o2 = new Olut(); 
    o1.rekisteroi(); o2.rekisteroi(); 
    assertEquals("From: Oluet line: 80", 0, oluet.getLkm()); 
    oluet.korvaaTaiLisaa(o1); assertEquals("From: Oluet line: 81", 1, oluet.getLkm()); 
    oluet.korvaaTaiLisaa(o2); assertEquals("From: Oluet line: 82", 2, oluet.getLkm()); 
    Olut o3 = o1.clone(); 
    o3.aseta(3, "sour ale"); 
    oluet.korvaaTaiLisaa(o3); 
    assertEquals("From: Oluet line: 86", 2, oluet.getLkm()); 
    assertEquals("From: Oluet line: 87", true, oluet.anna(0).equals(o3)); 
    assertEquals("From: Oluet line: 88", true, oluet.anna(1).equals(o2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta128 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta128() throws SailoException {    // Oluet: 128
    Oluet oluet = new Oluet(); 
    Olut o1 = new Olut(), o2 = new Olut(); 
    o1.taytaEsimTiedoilla(); 
    o2.taytaEsimTiedoilla(); 
    o1.rekisteroi(); o2.rekisteroi(); 
    String tiedNimi = "testi/oluet.dat"; 
    oluet.setTiedNimi(tiedNimi); 
    File ftied = new File(tiedNimi); 
    File dir = new File("testi"); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    oluet.lueTiedostosta(); 
    fail("Oluet: 142 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    oluet.lisaa(o1); 
    oluet.lisaa(o2); 
    oluet.tallenna(); 
    oluet = new Oluet(); 
    oluet.setTiedNimi(tiedNimi); 
    oluet.lueTiedostosta(); 
    assertEquals("From: Oluet line: 149", 2, oluet.getLkm()); 
    assertEquals("From: Oluet line: 150", true, oluet.anna(0).getNimi().equals(o1.getNimi())); 
    assertEquals("From: Oluet line: 151", true, oluet.anna(1).getNimi().equals(o2.getNimi())); 
    ftied.delete(); 
    dir.delete(); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi212 */
  @Test
  public void testEtsi212() {    // Oluet: 212
    Oluet oluet = new Oluet(); 
    Olut o1 = new Olut(); o1.parse("1|Cloudberry Saison|Pyynikin Brewing Company|saison|5.5|32.0"); 
    Olut o2 = new Olut(); o2.parse("2|Red|Teerenpeli|red ale|5.0|30.0"); 
    Olut o3 = new Olut(); o3.parse("3|Candy Beer Saga vol.1|Panimoyhti√∂ X|sour ale|5.5|42.0"); 
    Olut o4 = new Olut(); o4.parse("4|Hullu Jussi|Teerenpeli|porter|5.0|0.0"); 
    Olut o5 = new Olut(); o5.parse("5|Pohjoiskaarre|Teerenpeli|pale ale|4.2|32.0"); 
    oluet.lisaa(o1); oluet.lisaa(o2); oluet.lisaa(o3); oluet.lisaa(o4); oluet.lisaa(o5); 
    List<Olut> loytyneet = (List<Olut>)oluet.etsi("*c*", 1); 
    assertEquals("From: Oluet line: 222", 2, loytyneet.size()); 
    assertEquals("From: Oluet line: 223", true, loytyneet.get(0).equals(o3)); 
    assertEquals("From: Oluet line: 224", true, loytyneet.get(1).equals(o1)); 
    loytyneet =  (List<Olut>)oluet.etsi("*ale*", 3); 
    assertEquals("From: Oluet line: 226", 3, loytyneet.size()); 
    assertEquals("From: Oluet line: 227", true, loytyneet.get(0) == o5); 
    assertEquals("From: Oluet line: 228", true, loytyneet.get(1) == o2); 
    assertEquals("From: Oluet line: 229", true, loytyneet.get(2) == o3); 
    loytyneet =  (List<Olut>)oluet.etsi("", -1); 
    assertEquals("From: Oluet line: 231", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista252 */
  @Test
  public void testPoista252() {    // Oluet: 252
    Oluet oluet = new Oluet(); 
    Olut o1 = new Olut(), o2 = new Olut(), o3 = new Olut(); 
    o1.rekisteroi(); o2.rekisteroi(); o3.rekisteroi(); 
    int id1 = o1.getOlutId(); 
    oluet.lisaa(o1); oluet.lisaa(o2); oluet.lisaa(o3); 
    assertEquals("From: Oluet line: 258", 1, oluet.poista(id1+1)); 
    assertEquals("From: Oluet line: 259", 2, oluet.getLkm()); 
    assertEquals("From: Oluet line: 260", 1, oluet.poista(id1)); 
    assertEquals("From: Oluet line: 261", 1, oluet.getLkm()); 
    assertEquals("From: Oluet line: 262", 0, oluet.poista(id1+3)); 
    assertEquals("From: Oluet line: 263", 1, oluet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiId283 */
  @Test
  public void testEtsiId283() {    // Oluet: 283
    Oluet oluet = new Oluet(); 
    Olut o1 = new Olut(), o2 = new Olut(), o3 = new Olut(); 
    o1.rekisteroi(); o2.rekisteroi(); o3.rekisteroi(); 
    oluet.lisaa(o1); oluet.lisaa(o2); oluet.lisaa(o3); 
    int id1 = o1.getOlutId(); 
    assertEquals("From: Oluet line: 289", 0, oluet.etsiId(id1)); 
    assertEquals("From: Oluet line: 290", 1, oluet.etsiId(id1 + 1)); 
    assertEquals("From: Oluet line: 291", 2, oluet.etsiId(id1 + 2)); 
  } // Generated by ComTest END
}
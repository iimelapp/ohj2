package olutrekisteri.test;
// Generated by ComTest BEGIN
import olutrekisteri.*;
import olutrekisteri.Arvio.Vertailija;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.19 17:30:09 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class ArvioTest {



  // Generated by ComTest BEGIN
  /** testGetKenttia31 */
  @Test
  public void testGetKenttia31() {    // Arvio: 31
    Arvio arvio = new Arvio(); 
    assertEquals("From: Arvio line: 33", 5, arvio.getKenttia()); 
    assertEquals("From: Arvio line: 34", 2, arvio.ekaKentta()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi95 */
  @Test
  public void testRekisteroi95() {    // Arvio: 95
    Arvio a1 = new Arvio(); 
    assertEquals("From: Arvio line: 97", 0, a1.getArvioId()); 
    a1.rekisteroi(); 
    Arvio a2 = new Arvio(); 
    a2.rekisteroi(); 
    int n1 = a1.getArvioId(); 
    int n2 = a2.getArvioId(); 
    assertEquals("From: Arvio line: 103", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetArvioId116 */
  @Test
  public void testGetArvioId116() {    // Arvio: 116
    Arvio arvio = new Arvio(); 
    arvio.parse("16|11|3.80|31.3.2021|hyvää"); 
    assertEquals("From: Arvio line: 119", 16, arvio.getArvioId()); 
    assertEquals("From: Arvio line: 120", 11, arvio.getOlutId()); 
    assertEquals("From: Arvio line: 121", 3.80, arvio.getArvosana(), 0.000001); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse159 */
  @Test
  public void testParse159() {    // Arvio: 159
    Arvio arvio = new Arvio(); 
    arvio.parse("    16|11|  3.80|31.3.2021| hyvää"); 
    assertEquals("From: Arvio line: 162", true, arvio.toString().startsWith("16|11|3.80|")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetKysymys179 */
  @Test
  public void testGetKysymys179() {    // Arvio: 179
    Arvio arvio = new Arvio(); 
    assertEquals("From: Arvio line: 181", "arvioId", arvio.getKysymys(0)); 
    assertEquals("From: Arvio line: 182", "olutId", arvio.getKysymys(1)); 
    assertEquals("From: Arvio line: 183", "arvosana", arvio.getKysymys(2)); 
    assertEquals("From: Arvio line: 184", "", arvio.getKysymys(-1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna203 */
  @Test
  public void testAnna203() {    // Arvio: 203
    Arvio arvio = new Arvio(); 
    arvio.parse("    16|11|  3.80|31.3.2021| hyvää"); 
    assertEquals("From: Arvio line: 206", "16", arvio.anna(0)); 
    assertEquals("From: Arvio line: 207", "11", arvio.anna(1)); 
    assertEquals("From: Arvio line: 208", "3.8", arvio.anna(2)); 
    assertEquals("From: Arvio line: 209", "", arvio.anna(-1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta229 */
  @Test
  public void testAseta229() {    // Arvio: 229
    Arvio arvio = new Arvio(); 
    assertEquals("From: Arvio line: 231", null, arvio.aseta(0, "1")); 
    assertEquals("From: Arvio line: 232", "Pitää olla numero", arvio.aseta(2, "kissa")); 
    assertEquals("From: Arvio line: 233", null, arvio.aseta(2, "3.5")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString266 */
  @Test
  public void testToString266() {    // Arvio: 266
    Arvio arvio = new Arvio(); 
    arvio.taytaEsimTiedoilla(1); 
    { String _l_=arvio.toString(),_r_=".*0|1|.*|24.12.2020|hyvää"; if ( !_l_.matches(_r_) ) fail("From: Arvio line: 269" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}; 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEquals282 */
  @Test
  public void testEquals282() {    // Arvio: 282
    Arvio a1 = new Arvio(), a2 = new Arvio(), a3 = new Arvio(); 
    a1.parse("16|11|3.80|31.3.2021|hyvää"); 
    a2.parse("16|11|3.80|31.3.2021|hyvää"); 
    a3.parse("16|11|3.80|31.1.2021|hyvää"); 
    assertEquals("From: Arvio line: 287", true, a1.equals(a2)); 
    assertEquals("From: Arvio line: 288", false, a1.equals(a3)); 
    assertEquals("From: Arvio line: 289", true, a2.equals(a1)); 
    assertEquals("From: Arvio line: 290", false, a2.equals(a3)); 
    assertEquals("From: Arvio line: 291", false, a3.equals(null)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone310 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone310() throws CloneNotSupportedException {    // Arvio: 310
    Arvio arvio = new Arvio(); 
    arvio.parse("16|11|3.80|31.3.2021|hyvää"); 
    Object kopio = arvio.clone(); 
    assertEquals("From: Arvio line: 315", arvio.toString(), kopio.toString()); 
    arvio.parse("16|11|3.80|12.4.2021|hyvää"); 
    assertEquals("From: Arvio line: 317", false, kopio.toString().equals(arvio.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetAvain350 */
  @Test
  public void testGetAvain350() {    // Arvio: 350
    Arvio arvio = new Arvio(); 
    arvio.parse("16|11|3.80|12.4.2021|hyvää"); 
    assertEquals("From: Arvio line: 353", "16", arvio.getAvain(0)); 
    assertEquals("From: Arvio line: 354", "11", arvio.getAvain(1)); 
    assertEquals("From: Arvio line: 355", "3.8", arvio.getAvain(2)); 
    assertEquals("From: Arvio line: 356", "", arvio.getAvain(10)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testCompare392 */
  @Test
  public void testCompare392() {    // Arvio: 392
    Arvio a1 = new Arvio(); a1.parse("1|5|4.3|30.3.2021|"); 
    Arvio a2 = new Arvio(); a2.parse("2|6|3.50|21.3.2021|"); 
    Arvio a3 = new Arvio(); a3.parse("3|11|3.80|31.3.2021|"); 
    Vertailija v1 = new Vertailija(0); 
    assertEquals("From: Arvio line: 399", true, v1.compare(a1, a2) < 0); 
    assertEquals("From: Arvio line: 400", true, v1.compare(a3, a1) > 0); 
    assertEquals("From: Arvio line: 401", true, v1.compare(a2, a3) < 0); 
    Vertailija v2 = new Vertailija(2); 
    assertEquals("From: Arvio line: 403", true, v2.compare(a1, a2) > 0); 
    assertEquals("From: Arvio line: 404", true, v2.compare(a2, a3) < 0); 
    assertEquals("From: Arvio line: 405", true, v2.compare(a3, a1) < 0); 
  } // Generated by ComTest END
}
package olutrekisteri.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import olutrekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.20 09:42:30 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class OlutrekisteriTest {


  // Generated by ComTest BEGIN  // Olutrekisteri: 19
  private Olutrekisteri rekisteri; 
  private Olut o1; 
  private Olut o2; 
  private int id1; 
  private int id2; 
  private Arvio a1; 
  private Arvio a2; 
  private Arvio a3; 
  private Arvio a4; 
  private Arvio a5; 

  public void alustaRekisteri() {
  rekisteri = new Olutrekisteri(); 
  o1 = new Olut(); o1.taytaEsimTiedoilla(); o1.rekisteroi(); 
  o2 = new Olut(); o2.taytaEsimTiedoilla(); o2.rekisteroi(); 
  id1 = o1.getOlutId(); 
  id2 = o2.getOlutId(); 
  a1 = new Arvio(id2); a1.taytaEsimTiedoilla(id2); 
  a2 = new Arvio(id1); a2.taytaEsimTiedoilla(id1); 
  a3 = new Arvio(id2); a3.taytaEsimTiedoilla(id2); 
  a4 = new Arvio(id1); a4.taytaEsimTiedoilla(id1); 
  a5 = new Arvio(id2); a5.taytaEsimTiedoilla(id2); 
  rekisteri.lisaa(o1); 
  rekisteri.lisaa(o2); 
  rekisteri.lisaa(a1); 
  rekisteri.lisaa(a2); 
  rekisteri.lisaa(a3); 
  rekisteri.lisaa(a4); 
  rekisteri.lisaa(a5); 
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa62 */
  @Test
  public void testLisaa62() {    // Olutrekisteri: 62
    Olutrekisteri rekisteri = new Olutrekisteri(); 
    Olut olut1 = new Olut(); Olut olut2 = new Olut(); 
    olut1.rekisteroi(); olut2.rekisteroi(); 
    assertEquals("From: Olutrekisteri line: 66", 0, rekisteri.getOluita()); 
    rekisteri.lisaa(olut1); assertEquals("From: Olutrekisteri line: 67", 1, rekisteri.getOluita()); 
    rekisteri.lisaa(olut2); assertEquals("From: Olutrekisteri line: 68", 2, rekisteri.getOluita()); 
    rekisteri.lisaa(olut1); assertEquals("From: Olutrekisteri line: 69", 3, rekisteri.getOluita()); 
    assertEquals("From: Olutrekisteri line: 70", olut1, rekisteri.annaOlut(0)); 
    assertEquals("From: Olutrekisteri line: 71", olut2, rekisteri.annaOlut(1)); 
    assertEquals("From: Olutrekisteri line: 72", olut1, rekisteri.annaOlut(2)); 
    try {
    assertEquals("From: Olutrekisteri line: 73", olut1, rekisteri.annaOlut(3)); 
    fail("Olutrekisteri: 73 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    rekisteri.lisaa(olut2); assertEquals("From: Olutrekisteri line: 74", 4, rekisteri.getOluita()); 
    rekisteri.lisaa(olut1); assertEquals("From: Olutrekisteri line: 75", 5, rekisteri.getOluita()); 
    rekisteri.lisaa(olut2); assertEquals("From: Olutrekisteri line: 76", 6, rekisteri.getOluita()); 
    rekisteri.lisaa(olut1); assertEquals("From: Olutrekisteri line: 77", 7, rekisteri.getOluita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista89 
   * @throws SailoException when error
   */
  @Test
  public void testPoista89() throws SailoException {    // Olutrekisteri: 89
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 92", 2, rekisteri.etsi("*", 0).size()); 
    assertEquals("From: Olutrekisteri line: 93", 2, rekisteri.annaArviot(o1).size()); 
    assertEquals("From: Olutrekisteri line: 94", 1, rekisteri.poista(o1)); 
    assertEquals("From: Olutrekisteri line: 95", 1, rekisteri.etsi("*", 0).size()); 
    assertEquals("From: Olutrekisteri line: 96", 0, rekisteri.annaArviot(o1).size()); 
    assertEquals("From: Olutrekisteri line: 97", 3, rekisteri.annaArviot(o2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista111 */
  @Test
  public void testPoista111() {    // Olutrekisteri: 111
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 113", 2, rekisteri.annaArviot(o1).size()); 
    rekisteri.poista(a2); 
    assertEquals("From: Olutrekisteri line: 115", 1, rekisteri.annaArviot(o1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa128 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa128() throws SailoException {    // Olutrekisteri: 128
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 131", 2, rekisteri.etsi("*", 0).size()); 
    rekisteri.korvaaTaiLisaa(o1); 
    assertEquals("From: Olutrekisteri line: 133", 2, rekisteri.etsi("*", 0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKorvaaTaiLisaa145 */
  @Test
  public void testKorvaaTaiLisaa145() {    // Olutrekisteri: 145
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 147", 3, rekisteri.annaArviot(o2).size()); 
    rekisteri.korvaaTaiLisaa(a5); 
    assertEquals("From: Olutrekisteri line: 149", 3, rekisteri.annaArviot(o2).size()); 
    Arvio a6 = new Arvio(o2.getOlutId()); 
    a6.rekisteroi(); 
    rekisteri.lisaa(a6); 
    assertEquals("From: Olutrekisteri line: 153", 4, rekisteri.annaArviot(o2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa164 */
  @Test
  public void testLisaa164() {    // Olutrekisteri: 164
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 166", 3, rekisteri.annaArviot(o2).size()); 
    rekisteri.lisaa(a5); 
    assertEquals("From: Olutrekisteri line: 168", 4, rekisteri.annaArviot(o2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaOlut189 */
  @Test
  public void testAnnaOlut189() {    // Olutrekisteri: 189
    alustaRekisteri(); 
    assertEquals("From: Olutrekisteri line: 191", 2, rekisteri.getOluita()); 
    rekisteri.annaOlut(0).toString().equals(o1); 
    rekisteri.annaOlut(1).toString().equals(o2); 
    try {
    rekisteri.annaOlut(2).toString(); 
    fail("Olutrekisteri: 194 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaArviot206 */
  @Test
  public void testAnnaArviot206() {    // Olutrekisteri: 206
    alustaRekisteri(); 
    Olut o3 = new Olut(); 
    List<Arvio> loytyneet; 
    loytyneet = rekisteri.annaArviot(o3); 
    assertEquals("From: Olutrekisteri line: 212", 0, loytyneet.size()); 
    loytyneet = rekisteri.annaArviot(o1); 
    assertEquals("From: Olutrekisteri line: 214", 2, loytyneet.size()); 
    assertEquals("From: Olutrekisteri line: 215", true, loytyneet.get(0) == a2); 
    assertEquals("From: Olutrekisteri line: 216", true, loytyneet.get(1) == a4); 
    loytyneet = rekisteri.annaArviot(o2); 
    assertEquals("From: Olutrekisteri line: 218", 3, loytyneet.size()); 
    assertEquals("From: Olutrekisteri line: 219", true, loytyneet.get(0) == a1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi233 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi233() throws CloneNotSupportedException, SailoException {    // Olutrekisteri: 233
    alustaRekisteri(); 
    Olut o3 = new Olut(); o3.rekisteroi(); 
    o3.aseta(1, "Gosebump"); 
    rekisteri.lisaa(o3); 
    Collection<Olut> loytyneet = rekisteri.etsi("*bump*", 1); 
    assertEquals("From: Olutrekisteri line: 240", 1, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiParhaat251 */
  @Test
  public void testEtsiParhaat251() {    // Olutrekisteri: 251
    alustaRekisteri(); 
    Olut o3 = new Olut(), o4 = new Olut(); 
    o1.parse("1|Cloudberry Saison|Pyynikin Brewing Company|saison|5.5|32.0"); 
    o2.parse("2|Red|Teerenpeli|red ale|5.0|30.0"); 
    o3.parse("3|Candy Beer Saga vol.1|Panimoyhti√∂ X|sour ale|5.5|42.0"); 
    o4.parse("4|Hullu Jussi|Teerenpeli|porter|5.0|0.0"); 
    rekisteri.lisaa(o3); rekisteri.lisaa(o4); 
    a1.parse("1|2|3.8|"); 
    a2.parse("2|1|4.5|"); 
    a3.parse("3|2|2.5|"); 
    a4.parse("4|3|4.5|"); 
    a5.parse("5|4|3.0|"); 
    String[] parhaat = rekisteri.etsiParhaat(); 
    assertEquals("From: Olutrekisteri line: 265", true, parhaat[0].equals(o3.getNimi() + " " + a4.getArvosana())); 
    assertEquals("From: Olutrekisteri line: 266", true, parhaat[1].equals(o1.getNimi() + " " + a2.getArvosana())); 
    assertEquals("From: Olutrekisteri line: 267", true, parhaat[2].equals(o2.getNimi() + " " + a1.getArvosana())); 
    assertEquals("From: Olutrekisteri line: 268", true, parhaat[3].equals(o4.getNimi() + " " + a5.getArvosana())); 
    assertEquals("From: Olutrekisteri line: 269", true, parhaat[4].equals(o2.getNimi() + " " + a3.getArvosana())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta289 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta289() throws SailoException {    // Olutrekisteri: 289
    rekisteri = new Olutrekisteri(); 
    String hakemisto = "testi"; 
    File dir = new File(hakemisto); 
    File ftied = new File(hakemisto + "/oluet.dat"); 
    File aftied = new File(hakemisto + "/arviot.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    aftied.delete(); 
    rekisteri = new Olutrekisteri(); 
    try {
    rekisteri.lueTiedostosta(hakemisto); 
    fail("Olutrekisteri: 302 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    alustaRekisteri(); 
    rekisteri.setTiedostot(hakemisto); 
    rekisteri.tallenna(); 
    rekisteri.lueTiedostosta(hakemisto); 
    Collection<Olut> kaikki = rekisteri.etsi("", -1); 
    assertEquals("From: Olutrekisteri line: 308", 2, kaikki.size()); 
    Iterator<Olut> it = kaikki.iterator(); 
    it.next().toString().equals(o1.toString()); 
    it.next().toString().equals(o2.toString()); 
    assertEquals("From: Olutrekisteri line: 312", false, it.hasNext()); 
    List<Arvio> loytyneet = rekisteri.annaArviot(o1); 
    Iterator<Arvio> i = loytyneet.iterator(); 
    assertEquals("From: Olutrekisteri line: 315", a2, i.next()); 
    assertEquals("From: Olutrekisteri line: 316", a4, i.next()); 
    assertEquals("From: Olutrekisteri line: 317", false, i.hasNext()); 
    loytyneet = rekisteri.annaArviot(o2); 
    i = loytyneet.iterator(); 
    assertEquals("From: Olutrekisteri line: 320", a1, i.next()); 
    assertEquals("From: Olutrekisteri line: 321", a3, i.next()); 
    assertEquals("From: Olutrekisteri line: 322", a5, i.next()); 
    assertEquals("From: Olutrekisteri line: 323", false, i.hasNext()); 
    rekisteri.lisaa(o2); 
    rekisteri.lisaa(a5); 
    rekisteri.tallenna(); 
    ftied.delete(); 
    aftied.delete(); 
    dir.delete(); 
  } // Generated by ComTest END
}
package olutrekisteri.test;
// Generated by ComTest BEGIN
import olutrekisteri.*;
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.20 09:28:56 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class ArviotTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa42 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa42() throws CloneNotSupportedException {    // Arviot: 42
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(), a2 = new Arvio(); 
    a1.rekisteroi(); a2.rekisteroi(); 
    assertEquals("From: Arviot line: 48", 0, arviot.getLkm()); 
    arviot.korvaaTaiLisaa(a1); assertEquals("From: Arviot line: 49", 1, arviot.getLkm()); 
    arviot.korvaaTaiLisaa(a2); assertEquals("From: Arviot line: 50", 2, arviot.getLkm()); 
    Arvio a3 = a1.clone(); 
    a3.aseta(2, "3.2"); 
    Iterator<Arvio> i = arviot.iterator(); 
    assertEquals("From: Arviot line: 54", a1, i.next()); 
    arviot.korvaaTaiLisaa(a3); assertEquals("From: Arviot line: 55", 2, arviot.getLkm()); 
    i = arviot.iterator(); 
    Arvio a = i.next(); 
    assertEquals("From: Arviot line: 58", a3, a); 
    assertEquals("From: Arviot line: 59", false, a == a1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaArviot79 */
  @Test
  public void testAnnaArviot79() {    // Arviot: 79
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(2); arviot.lisaa(a1); 
    Arvio a2 = new Arvio(1); arviot.lisaa(a2); 
    Arvio a3 = new Arvio(2); arviot.lisaa(a3); 
    Arvio a4 = new Arvio(1); arviot.lisaa(a4); 
    Arvio a5 = new Arvio(2); arviot.lisaa(a5); 
    Arvio a6 = new Arvio(5); arviot.lisaa(a6); 
    List<Arvio> loytyneet; 
    loytyneet = arviot.annaArviot(3); 
    assertEquals("From: Arviot line: 92", 0, loytyneet.size()); 
    loytyneet = arviot.annaArviot(1); 
    assertEquals("From: Arviot line: 94", 2, loytyneet.size()); 
    assertEquals("From: Arviot line: 95", true, loytyneet.get(0) == a2); 
    assertEquals("From: Arviot line: 96", true, loytyneet.get(1) == a4); 
    loytyneet = arviot.annaArviot(5); 
    assertEquals("From: Arviot line: 98", 1, loytyneet.size()); 
    assertEquals("From: Arviot line: 99", true, loytyneet.get(0) == a6); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta130 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta130() throws SailoException {    // Arviot: 130
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(); a1.taytaEsimTiedoilla(2); 
    Arvio a2 = new Arvio(); a2.taytaEsimTiedoilla(1); 
    Arvio a3 = new Arvio(); a3.taytaEsimTiedoilla(2); 
    Arvio a4 = new Arvio(); a4.taytaEsimTiedoilla(1); 
    Arvio a5 = new Arvio(); a5.taytaEsimTiedoilla(2); 
    String tiedNimi = "testi/arviot.dat"; 
    arviot.setTiedNimi(tiedNimi); 
    File ftied = new File(tiedNimi); 
    File dir = new File("testi"); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    arviot.lueTiedostosta(); 
    fail("Arviot: 145 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    arviot.lisaa(a1); 
    arviot.lisaa(a2); 
    arviot.lisaa(a3); 
    arviot.lisaa(a4); 
    arviot.lisaa(a5); 
    arviot.tallenna(); 
    arviot = new Arviot(); 
    arviot.setTiedNimi(tiedNimi); 
    arviot.lueTiedostosta(); 
    Iterator<Arvio> i = arviot.iterator(); 
    assertEquals("From: Arviot line: 156", a1.toString(), i.next().toString()); 
    assertEquals("From: Arviot line: 157", a2.toString(), i.next().toString()); 
    assertEquals("From: Arviot line: 158", a3.toString(), i.next().toString()); 
    assertEquals("From: Arviot line: 159", a4.toString(), i.next().toString()); 
    assertEquals("From: Arviot line: 160", a5.toString(), i.next().toString()); 
    assertEquals("From: Arviot line: 161", false, i.hasNext()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista203 */
  @Test
  public void testPoista203() {    // Arviot: 203
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(); a1.taytaEsimTiedoilla(2); 
    Arvio a2 = new Arvio(); a2.taytaEsimTiedoilla(1); 
    Arvio a3 = new Arvio(); a3.taytaEsimTiedoilla(2); 
    Arvio a4 = new Arvio(); a4.taytaEsimTiedoilla(1); 
    Arvio a5 = new Arvio(); a5.taytaEsimTiedoilla(2); 
    arviot.lisaa(a1); 
    arviot.lisaa(a2); 
    arviot.lisaa(a3); 
    arviot.lisaa(a4); 
    assertEquals("From: Arviot line: 214", false, arviot.poista(a5)); assertEquals("From: Arviot line: 214", 4, arviot.getLkm()); 
    assertEquals("From: Arviot line: 215", true, arviot.poista(a1)); assertEquals("From: Arviot line: 215", 3, arviot.getLkm()); 
    List<Arvio> a = arviot.annaArviot(2); 
    assertEquals("From: Arviot line: 217", 1, a.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaOluenArviot231 */
  @Test
  public void testPoistaOluenArviot231() {    // Arviot: 231
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(); a1.taytaEsimTiedoilla(2); 
    Arvio a2 = new Arvio(); a2.taytaEsimTiedoilla(1); 
    Arvio a3 = new Arvio(); a3.taytaEsimTiedoilla(2); 
    Arvio a4 = new Arvio(); a4.taytaEsimTiedoilla(1); 
    Arvio a5 = new Arvio(); a5.taytaEsimTiedoilla(2); 
    arviot.lisaa(a1); 
    arviot.lisaa(a2); 
    arviot.lisaa(a3); 
    arviot.lisaa(a4); 
    arviot.lisaa(a5); 
    assertEquals("From: Arviot line: 243", 3, arviot.poistaOluenArviot(2)); assertEquals("From: Arviot line: 243", 2, arviot.getLkm()); 
    assertEquals("From: Arviot line: 244", 0, arviot.poistaOluenArviot(3)); assertEquals("From: Arviot line: 244", 2, arviot.getLkm()); 
    List<Arvio> a = arviot.annaArviot(2); 
    assertEquals("From: Arviot line: 246", 0, a.size()); 
    a = arviot.annaArviot(1); 
    assertEquals("From: Arviot line: 248", a2, a.get(0)); 
    assertEquals("From: Arviot line: 249", a4, a.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator271 */
  @Test
  public void testIterator271() {    // Arviot: 271
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(2); arviot.lisaa(a1); 
    Arvio a2 = new Arvio(1); arviot.lisaa(a2); 
    Arvio a3 = new Arvio(2); arviot.lisaa(a3); 
    Arvio a4 = new Arvio(1); arviot.lisaa(a4); 
    Arvio a5 = new Arvio(2); arviot.lisaa(a5); 
    Iterator<Arvio> i2 = arviot.iterator(); 
    assertEquals("From: Arviot line: 283", a1, i2.next()); 
    assertEquals("From: Arviot line: 284", a2, i2.next()); 
    assertEquals("From: Arviot line: 285", a3, i2.next()); 
    assertEquals("From: Arviot line: 286", a4, i2.next()); 
    assertEquals("From: Arviot line: 287", a5, i2.next()); 
    try {
    assertEquals("From: Arviot line: 288", a2, i2.next()); 
    fail("Arviot: 288 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int id[] = { 2, 1, 2, 1, 2} ; 
    for (Arvio a : arviot) {
    assertEquals("From: Arviot line: 294", id[n], a.getOlutId()); 
    n++; 
    }
    assertEquals("From: Arviot line: 298", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiParhaat318 */
  @Test
  public void testEtsiParhaat318() {    // Arviot: 318
    Arviot arviot = new Arviot(); 
    Arvio a1 = new Arvio(), a2 = new Arvio(), a3 = new Arvio(), a4 = new Arvio(), a5 = new Arvio(); 
    a1.parse("1|2|3.8|"); 
    a2.parse("2|1|4.5|"); 
    a3.parse("3|2|2.5|"); 
    a4.parse("4|3|4.5|"); 
    a5.parse("5|4|3.0|"); 
    arviot.lisaa(a1); arviot.lisaa(a2); arviot.lisaa(a3); arviot.lisaa(a4); arviot.lisaa(a5); 
    List<Arvio> parhaat = arviot.etsiParhaat(); 
    assertEquals("From: Arviot line: 328", 5, parhaat.size()); 
    Iterator<Arvio> i = parhaat.iterator(); 
    assertEquals("From: Arviot line: 330", a4, i.next()); 
    assertEquals("From: Arviot line: 331", a2, i.next()); 
    assertEquals("From: Arviot line: 332", a1, i.next()); 
    assertEquals("From: Arviot line: 333", a5, i.next()); 
    assertEquals("From: Arviot line: 334", a3, i.next()); 
    assertEquals("From: Arviot line: 335", false, i.hasNext()); 
  } // Generated by ComTest END
}